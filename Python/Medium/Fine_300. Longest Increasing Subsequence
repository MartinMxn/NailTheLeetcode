class Solution:
    """
    for each index i 
    dp[i] -> longest length of first i char
    """
    def lengthOfLIS(self, nums: List[int]) -> int:
        """
        O(n^2)
        O(n)
        """
        # n = len(nums)
        # dp = [0] * (n)
        # for i in range(n):
        #     dp[i] = 1
        #     for j in range(i):
        #         if nums[i] > nums[j]:
        #             dp[i] = max(dp[i], dp[j] + 1)
        # return max(dp)
        """
        O(nlogn)
        O(n)
        """
        if not nums:
            return 0
        n = len(nums)
        dp = [nums[0]]
        
        def find_pos(dp, x):
            l, r = 0, len(dp)
            while l <= r:
                m = (l + r) // 2
                if dp[m] == x:
                    return m
                elif dp[m] < x:
                    l = m + 1
                else:
                    r = m - 1
            return l
                
        for i in range(1, n):
            if nums[i] > dp[-1]:
                dp.append(nums[i])
            else:
                # binary search to replace the char
                # post = bisect.bisect_left(dp, nums[i])
                pos = find_pos(dp, nums[i])
                if pos < n:
                    dp[pos] = nums[i]
        
        return len(dp)
            
